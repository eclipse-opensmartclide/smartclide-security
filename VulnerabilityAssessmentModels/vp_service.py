# -*- coding: utf-8 -*-
"""
Created on Fri Feb 18 14:51:01 2022

@author: iliaskaloup
"""

from flask import Flask, jsonify, request
import time
from flask_cors import CORS
from waitress import serve
#import json
import os
#from os import path
#from bson import json_util
import sys
from git import Repo
from datetime import datetime
#import requests
from pathlib import Path
import shutil
import pymongo

import vp_model_for_service

# Create the Flask app
app = Flask(__name__)
# Enable CORS
CORS(app)

if len(sys.argv) != 3:
    sys.exit("Specify IP and PORT for the mongo database.")
DB_IP = sys.argv[1] # "160.40.52.130"
DB_PORT = sys.argv[2] # "27017"
mongoString = "mongodb://" + DB_IP + ":" + DB_PORT + "/"
myclient = pymongo.MongoClient(mongoString)
mydb = myclient["dependabilityToolbox"]
mycol = mydb["vulnerabilityPrediction"]

def insertMongo(mycol, doc):
    mycol.insert_one(doc)
    '''resp = 'The changes have been submitted.'
    message = {
            'status': 200,
            'message': resp
	}      
    return message'''

def checkIfExists(mycol, project_name, user_name, sha, my_branch):
    mydoc = mycol.find({'username':user_name, 'project_name':project_name, 'commit_sha':sha, 'project_branch': my_branch})
    res = list(mydoc)
    return res

def clearDisk(repo_dir):
    shutil.rmtree(repo_dir,ignore_errors=True)

#@app.route('/DependabilityToolbox/VulnerabilityPrediction', methods=['GET'])
@app.route('/VulnerabilityAssessment', methods=['GET'])
def GetVulnerabilityTable():
    #read arguements
    username=""
    git_url = request.args.get('project')
    language = request.args.get('lang')
    username = request.args.get('user_name')
    branch = request.args.get('branch_name', type = str)
    
    # get basic auth
    auth = request.authorization
    #print(auth,file=sys.stderr)

    if username == None:
        username=""
    #print(username,file=sys.stderr)
    # check if path is null
    if git_url == '' :
        return "You have to specify project's path."
    
    # check if language is specified
    if language == '' :
        return "You have to specify project's programming language (either java or cpp)."
    elif language != 'cpp' and language != 'java' and language != 'python' and language != 'javascript':
        return "Choose a project written in cpp, java, javascript or python programming language."
    
    # clone repo
    splitted = git_url.split("/")
    project_name = splitted[-1]
    
    if ".git" in project_name:
        project_name = project_name.split(".git")[0]
        splitted[-1] = splitted[-1].split(".git")[0]
    
    timestamp = int(round(time.time() * 1000))
    timestamp = str(timestamp)
    project_name_time = project_name + '_' + timestamp
    if not os.path.exists("VulnerabilityRepo"):
        os.makedirs("VulnerabilityRepo")
    repo_dir = "VulnerabilityRepo/" + splitted[-2] + '_' + splitted[-1] + '_' + timestamp
    local_repo_dir = Path(repo_dir)
    
    # include basic auth
    if auth != None:
        usr = auth.username
        password = auth.password
        #print(password,file=sys.stderr)
        if '@' in usr:
            usr = usr.replace('@','%40')
        if '@' in password:
            password = password.replace('@','%40')
        git_url2 = git_url.replace("https://","@")
        remote = f"https://{usr}:{password}" + git_url2
    else:
        remote = git_url
        
    # clone git repo
    try:
        if branch == None:
            repo = Repo.clone_from(remote, local_repo_dir) # by default main or master
        else:
            repo = Repo.clone_from(remote, local_repo_dir, branch = branch) # clone specific branch
        #print("Directory",local_repo_dir,"created")
    except FileExistsError:
        print("Directory already exists!")
    
    """check username correspndance to auth
    if ((username == "") and (usr != None)):
        username = usr"""
    
    # extra info
    date = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    commit_timestamp = repo.head.commit.committed_date
    commit_timestamp = str(commit_timestamp)
    #print(commit_timestamp, file=sys.stderr)
    
    # default or specific branch
    if branch == None:
        ## check branch = main or master
        repo_heads = repo.heads
        repo_heads_names = [h.name for h in repo_heads]
        my_branch = repo_heads_names[0]
    else:
        my_branch = branch

    #commit_sha = repo.rev_parse('origin/' + my_branch)
    commit_sha = repo.rev_parse(my_branch)
    
    commit_sha = str(commit_sha)
    #print(commit_sha, file=sys.stderr)

    # Check if exists in mongo
    prev = checkIfExists(mycol, project_name, username, commit_sha, my_branch)
    if (len(prev) > 0): #exists
        all_vp = prev[0]
        vp = all_vp['report']
        
    else:
        # apply VP
        vp = vp_model_for_service.getVul(local_repo_dir, language, project_name_time, date, commit_sha)
        '''if vp == "EXIT":
            return "There are no c, cpp, python, javascript or java files to analyze", 200
            sys.exit()'''
        #f = open(jsonFilePath,)
        #vp = json.load(f)
        #print(vp, file=sys.stderr)
        #com = json.dumps(vp)
        #print(com, file=sys.stderr)
    
    # prepare output message
    message = {
        'project_name': project_name,
        'project_id': "",
        'project_branch': my_branch,
        'commit_sha': commit_sha,
        'commit_timestamp': commit_timestamp,
        'username': username,
        'user_id': "",
        'timestamp': timestamp,
        'report': vp,
        }
    
    resp = jsonify(message['report'])
    #resp = jsonify(message)
    resp.status_code = 200
    
    #store to mongo
    if len(prev) == 0: 
        doc = message
        insertMongo(mycol, doc)
    
    # remove the cloned project from the memory before return
    clearDisk(local_repo_dir)
    
    return resp
    
@app.route("/")
def hello():
    return "Check for vulnerabilities in your software!"

# errorhandler ()
@app.errorhandler(400)
def bad_request(error=None):
    message = {
        'status': 400,
        'message': 'Bad Request: ' + request.url + ' --> Please check your data payload.',
    }
    resp = jsonify(message)
    resp.status_code = 400

    return resp

@app.errorhandler(500)
def internal_server_error(error=None):
    message = {
        'status': 500,
        'message': 'The server encountered an internal error and was unable to complete your request. Missing / invalid parameters or wrong basic auth credentials. ',
    }
    resp = jsonify(message)
    resp.status_code = 500

    return resp

def main():
    #print("\nServing on http://0.0.0.0:5008")
    #print("\nServing on http://0.0.0.0:5008/")
    #app.run(port = 5008, debug=True)
    serve(app, host='0.0.0.0', port=5008)

if __name__ == '__main__':
    main()
    



